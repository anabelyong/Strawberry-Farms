model StrawberryStage3
  uses "mmxprs"

   declarations
    ! NMonths = 1; DataFile = "StrawberryFieldsRegular.dat"; OutputFile = "Stage1Ethan.csv"
    ! NMonths = 1; DataFile = "StrawberryFieldsAll.dat"; OutputFile = "Stage2Ethan.csv"
    NMonths = 12; DataFile = "StrawberryFieldsPlanEnergyPriceIncreaseFixed.dat"; OutputFile = "Stage3Ethan.csv"
    Months = 1..NMonths
    Ingredients: set of string
    Nutrients: set of string
    Products: set of string
    MonthNames: array(Months) of string
    GrowingCost: integer
    IngredientBuyPrice: array(Ingredients) of real
    IngredientSupply: array(Ingredients, Months) of real
    IngredientSellPrice: array(Ingredients) of real
    IngredientDemand: array(Ingredients, Months) of real
    ProductionCapacity: real
    ProductMakeCost: array (Months) of real
    ProductSellPrice: array(Products) of real
    ProductDemand: array(Products, Months) of real
    NutrientContent: array(Nutrients, Ingredients) of real
    ContentRequirement: array(Nutrients, Products) of real
    ContentLimit: array(Nutrients, Products) of real
    UnitStorageCost: array (Months) of real
    WarehouseSize: real

    ProductMake: array(Products, Months) of mpvar
    ProductSell: array(Products, Months) of mpvar
    ProductStock: array(Products, Months) of mpvar

    IngredientUsed: array(Ingredients, Products, Months) of mpvar
    IngredientBuy: array(Ingredients, Months) of mpvar
    IngredientSold: array(Ingredients, Months) of mpvar
  end-declarations

  initialisations from DataFile
    Ingredients Nutrients Products MonthNames GrowingCost IngredientBuyPrice
    IngredientSupply IngredientSellPrice IngredientDemand ProductionCapacity
    ProductMakeCost ProductSellPrice ProductDemand NutrientContent
    ContentRequirement ContentLimit UnitStorageCost WarehouseSize
  end-initialisations

  TotalIncome := sum(p in Products, m in Months) ProductSell(p, m)*ProductSellPrice(p) + sum(m in Months, i in Ingredients) IngredientSold(i, m)*IngredientSellPrice(i)
  TotalCost :=  sum(p in Products, m in Months) ProductMakeCost(m)*ProductMake(p, m) + GrowingCost + sum(m in Months,i in Ingredients) (IngredientBuyPrice(i)*IngredientBuy(i, m)) + (sum(p in Products, m in Months)UnitStorageCost(m)*ProductStock(p, m))
  TotalProfit := TotalIncome - TotalCost

  forall(m in Months) CapacityCS(m) := sum(p in Products) ProductMake(p, m) <= ProductionCapacity

  forall(p in Products, m in Months) do
  	if m = 1 then
  		InventoryCS(p, m) := ProductStock(p, m) = ProductMake(p, m) - ProductSell(p, m)
  	else
  		InventoryCS(p, m) := ProductStock(p, m) = ProductStock(p, m-1) + ProductMake(p, m) - ProductSell(p, m)
  	end-if
  end-do

  forall(m in Months) do
	SpaceUsed(m) := sum(p in Products) ProductStock(p, m)
	WarehouseCS(m) := SpaceUsed(m) <= WarehouseSize
  end-do

  forall(p in Products, m in Months) do
      if m = 1 then
        MakeCS(p, m) := ProductSell(p, m) <= ProductMake(p, m)
      end-if
  end-do

  forall(p in Products, m in Months) ProductDemandCS(p, m) := ProductSell(p, m) <= ProductDemand(p, m)

  forall(n in Nutrients, p in Products, m in Months) do
    UpperlimitCS(n, p, m) := sum(i in Ingredients) NutrientContent(n, i) * IngredientUsed(i, p, m) <= ContentLimit(n, p) *  ProductMake(p, m)
    LowerlimitCS(n, p, m) := sum(i in Ingredients) NutrientContent(n, i) * IngredientUsed(i, p, m) >= ContentRequirement(n, p) * ProductMake(p, m)
  end-do

  forall(i in Ingredients, m in Months) do
  IngredientUsedCS(i, m) :=  IngredientBuy(i, m) <= IngredientSupply(i, m)
  IngredientDemandCS(i, m) := IngredientSold(i, m) <= IngredientDemand(i, m)
  IngredientCS(i, m) :=  IngredientBuy(i, m) - sum(p in Products) IngredientUsed(i, p, m) = IngredientSold(i, m)
  end-do

forall(p in Products, m in Months) IngreCS(p, m) := sum(i in Ingredients) IngredientUsed(i, p, m) = ProductMake(p, m)

maximise(TotalProfit)


forall(p in Products, m in Months) writeln("Make ", Products(p), " ", getsol(ProductMake(p, m)))
forall(p in Products, m in Months) writeln("Sold ", Products(p), " ",getsol(ProductSell(p, m)))
! forall(i in Ingredients) writeln("Used ", Ingredients(i), " " ,getsol(sum(p in Products)IngredientUsed(i, p)))
! forall(i in Ingredients) writeln("Buy ", Ingredients(i), " " ,getsol(IngredientBuy(i)))
! forall(i in Ingredients) writeln("Sold ", Ingredients(i), " " ,getsol(IngredientSold(i)))
writeln("Total Income = ", getsol(TotalIncome))
writeln("Total Cost = ",getsol(TotalCost))
writeln("Total Profit = ",getsol(TotalProfit))

!fopen("Stage3Ethan.csv", F_OUTPUT)

writeln("Ingredient Buy")
write("Month,")
forall(i in Ingredients) do
  write(i,",")
end-do
writeln
forall(m in Months) do
  write(m,",")
  forall(i in Ingredients) do
    write(strfmt(getsol(IngredientBuy(i, m)),8,1),",")
  end-do
  writeln
end-do

writeln("Ingredient Sold")
write("Month,")
forall(i in Ingredients) do
  write(i,",")
end-do
writeln
forall(m in Months) do
  write(m,",")
  forall(i in Ingredients) do
    write(strfmt(getsol(IngredientSold(i, m)),8,1),",")
  end-do
  writeln
end-do

writeln("Ingredient Used")
write("Month,")
forall(i in Ingredients) do
  write(i,",")
end-do
writeln
forall(m in Months) do
  write(m,",")
  forall(i in Ingredients) do
    write(strfmt(sum(p in Products)getsol(IngredientUsed(i, p, m)),8,1),",")
  end-do
  writeln
end-do

writeln("Total Income,",strfmt(getsol(TotalIncome),8,1))
forall(p in Products) do
  write(p," sale,")
end-do

forall(i in Ingredients) do
  write(i," sale,")
end-do

writeln

forall(p in Products) do
  write(strfmt(sum(m in Months)getsol(ProductSell(p,m))*ProductSellPrice(p), 8, 1),",")
end-do

forall(i in Ingredients) do
  write(strfmt(sum(m in Months)getsol(IngredientSold(i,m))*IngredientSellPrice(i), 8, 1),",")
end-do
writeln
writeln("Total Cost,",strfmt(getsol(TotalCost),8,1))
write("Product Manufacture Cost,Growing Cost,Storage Cost,")
forall(i in Ingredients) do
  write(i," cost,")
end-do

writeln

write(strfmt(sum(p in Products, m in Months) ProductMakeCost(m)*getsol(ProductMake(p, m)),8,1),",")
write(GrowingCost,",")
write(strfmt((sum(p in Products, m in Months)UnitStorageCost(m)*getsol(ProductStock(p, m))),8,1),",")

forall(i in Ingredients) do
  write(strfmt(sum(m in Months)getsol(IngredientBuy(i,m))*IngredientBuyPrice(i), 8, 1),",")
end-do

writeln
writeln("Total Profit", strfmt(getsol(TotalProfit),8,1))

!fclose(F_OUTPUT)
end-model
